官方文档：https://docs.projectdiscovery.io/templates/reference/helper-functions

 ----------------------------分割线----------------------------
 # https://example.com:443/foo/bar.php

{{BaseURL}}	        # https://example.com:443/foo/bar.php
{{RootURL}}	        # https://example.com:443
{{Hostname}}        # example.com:443
{{Host}}            # example.com
{{Port}}            # 443
{{Path}}            # /foo
{{File}}            # bar.php
{{Scheme}}          # https

 ----------------------------分割线----------------------------
 # 重点配置参数备忘：

    # skip-variables-check 可以使 nuclei 不要解析请求内容中 `{{` 为变量
    skip-variables-check: true

    # 如果模板中包含多个扫描路径，当第一个路径匹配成功时，会自动停止后续路径的扫描，这不会影响其他模板
    stop-at-first-match: true

    # 单位 bytes- 从服务器响应中读取的最大值
    max-size: 500

    # cookie-reuse 参数为 true，在多个请求之间维护基于 cookie 的会话，该参数接受布尔类型的输入，默认值为 false。
    cookie-reuse: true

    # req-condition 与 DSL表达式匹配器一起使用，它允许逻辑表达式包含跨多个请求/响应的条件
    # 在模板中添加 "req-condition: true" 选项，响应的属性可以使用 "<请求编号>" 后缀来引用特定的响应，例如 status_code_1、status_code_3 或 body_2
    req-condition: true

    redirects: true     	# 启用重定向
    max- redirects: 3   	# 允许重定向的次数，默认值为 10

 ----------------------------分割线----------------------------
 # 模板签名：

    # 从v3.0.0开始支持签名，未签名的模板默认会被禁用
    # 批量对模板进行签名
    nuclei -lfa -duc -sign -t /home/nuclei-templates

 ----------------------------分割线----------------------------
 # 返回输入的长度

{{len("Hello")}}
{{len(5555)}}

 ----------------------------分割线----------------------------
 # 随机字段

{{randstr}}
{{rand_int(10)}}

 ----------------------------分割线----------------------------
 # 大小写转换

{{to_lower("HELLO")}}		#将输入转换为小写字符
{{to_upper("hello")}}		#将输入转换为大写字符

 ----------------------------分割线----------------------------
 # 编码转换

{{url_decode("https:%2F%2Fprojectdiscovery.io%3Ftest=1")}}  #对输入字符串进行URL解码
{{url_encode("https://projectdiscovery.io/test?a=1")}}   #对输入字符串进行URL编码

{{hex_decode("6161")}}
{{hex_encode("aa")}}

{{sha1("Hello")}}
{{sha256("Hello")}}

{{base64("Hello")}}
{{base64(1234)}}
{{base64_decode("SGVsbG8=")}}
{{base64_py("Hello")}}     #像Python一样将字符串编码为Base64（包含换行符）

{{md5("Hello")}}
{{md5(1234)}}

 ----------------------------分割线----------------------------
{{rand_base(5)}}
{{rand_base(5, "abc")}}
{{rand_char("abc")}}
{{rand_char()}}
{{rand_int()}}
{{rand_int(1, 10)}}
{{rand_text_alpha(10)}}
{{rand_text_alpha(10, "abc")}}
{{rand_text_alphanumeric(10)}}
{{rand_text_alphanumeric(10, "ab12")}}
{{rand_text_numeric(10)}}
{{rand_text_numeric(10, 123)}}

 ----------------------------分割线----------------------------
 # 验证字符串是否包含子字符串
{{contains("Hello", "lo")}}

 ----------------------------分割线----------------------------
 
{{generate_java_gadget("commons-collections3.1", "wget {{interactsh-url}}", "base64")}}
{{gzip("Hello")}}
{{html_escape("<body>test</body>")}}
{{html_unescape("&lt;body&gt;test&lt;/body&gt;")}}
{{mmh3("Hello")}}
{{print_debug(1+2, "Hello")}}
{{regex("H([a-z]+)o", "Hello")}}
{{remove_bad_chars("abcd", "bc")}}
{{repeat("../", 5)}}
{{replace("Hello", "He", "Ha")}}
{{replace_regex("He123llo", "(\\d+)", "")}}
{{reverse("abc")}}
{{trim("aaaHelloddd", "ad")}}
{{trim_left("aaaHelloddd", "ad")}}
{{trim_prefix("aaHelloaa", "aa")}}
{{trim_right("aaaHelloddd", "ad")}}
{{trim_space("  Hello  ")}}
{{trim_suffix("aaHelloaa", "aa")}}
{{unix_time(10)}}
{{wait_for(1)}}

 ----------------------------分割线----------------------------
 # www.projectdiscovery.io

{{FQDN}}			# www.projectdiscovery.io
{{RDN}}				# projectdiscovery.io
{{DN}}				# projectdiscovery
{{SD}}				# www
{{TLD}}				# io